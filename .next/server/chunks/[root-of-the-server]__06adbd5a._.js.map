{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/model/user.ts"],"sourcesContent":["import mongoose, {Schema, Document} from 'mongoose';\r\n\r\nexport interface Message extends Document {\r\n    content: string;\r\n    createAt: Date\r\n}\r\n\r\n\r\nconst MessageSchema: Schema<Message> = new Schema({\r\n    content:{\r\n        type : String,\r\n        required: true\r\n    },\r\n    createAt:{\r\n        type:Date,\r\n        required: true,\r\n        default: Date.now\r\n    }\r\n})\r\n\r\n\r\nexport interface User extends Document {\r\n    username : string,\r\n    email : string,\r\n    password : string,\r\n    verifycode : string,\r\n    verifycodeExpiry : Date,\r\n    isVerified: boolean,\r\n    isAcceptingMessage:boolean,\r\n    message : Message[]\r\n}\r\n\r\n\r\nconst UserSchema: Schema<User> = new Schema({\r\n    username:{\r\n        type : String,\r\n        required: [true, \"Username is required\"],\r\n        trim: true,\r\n        unique: true\r\n    },\r\n   \r\n    email:{\r\n        type : String,\r\n        required: [true, \"email is required\"],\r\n        unique: true,\r\n        match:[/.+\\@.+\\..+/,\"plase use a valid email address\"]\r\n    },\r\n\r\n    password:{\r\n        type : String,\r\n        required: [true, \"password is required\"], \r\n    },\r\n\r\n    vrifycode:{\r\n        type : String,\r\n        required: [true, \"vrify code is required\"], \r\n    },\r\n    vrifycodeExpiry:{\r\n        type : Date,\r\n        required: [true, \"vrify code Expiry is required\"], \r\n    },\r\n\r\n     isVerified:{\r\n        type : Boolean,\r\n        default: false,\r\n    },\r\n\r\n     isAcceptingMessage:{\r\n        type : Boolean,\r\n        default: true\r\n    },\r\n\r\n      message: [MessageSchema]\r\n})\r\n\r\n\r\nconst UserModel = (mongoose.models.User as mongoose.Model<User>) || mongoose.model(\"User\" , UserSchema)\r\n\r\nexport default UserModel;"],"names":[],"mappings":";;;AAAA;;AAQA,MAAM,gBAAiC,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC9C,SAAQ;QACJ,MAAO;QACP,UAAU;IACd;IACA,UAAS;QACL,MAAK;QACL,UAAU;QACV,SAAS,KAAK,GAAG;IACrB;AACJ;AAeA,MAAM,aAA2B,IAAI,yGAAA,CAAA,SAAM,CAAC;IACxC,UAAS;QACL,MAAO;QACP,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;QACN,QAAQ;IACZ;IAEA,OAAM;QACF,MAAO;QACP,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,OAAM;YAAC;YAAa;SAAkC;IAC1D;IAEA,UAAS;QACL,MAAO;QACP,UAAU;YAAC;YAAM;SAAuB;IAC5C;IAEA,WAAU;QACN,MAAO;QACP,UAAU;YAAC;YAAM;SAAyB;IAC9C;IACA,iBAAgB;QACZ,MAAO;QACP,UAAU;YAAC;YAAM;SAAgC;IACrD;IAEC,YAAW;QACR,MAAO;QACP,SAAS;IACb;IAEC,oBAAmB;QAChB,MAAO;QACP,SAAS;IACb;IAEE,SAAS;QAAC;KAAc;AAC9B;AAGA,MAAM,YAAY,AAAC,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAA6B,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAS;uCAE7E","debugId":null}},
    {"offset": {"line": 227, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/lib/dbcon.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n \r\ntype connectionObject = {\r\n    isConnected?: number\r\n}\r\n\r\nconst connection: connectionObject = {}\r\n\r\nasync function dbConnect(): Promise<void> {\r\n    if(connection.isConnected){\r\n        console.log(\"Already connected to databass\")\r\n        return\r\n    }\r\n\r\n    try {\r\n    const db = await mongoose.connect(process.env.mongoDB_URI || '', {})\r\n    connection.isConnected = db.connections[0].readyState\r\n    console.log('db connected succefull ')\r\n    } catch (error) {\r\n        console.log(\"databass connetion falid\",error)\r\n        process.exit(1)\r\n    }\r\n}\r\n\r\nexport default dbConnect"],"names":[],"mappings":";;;AAAA;;AAOA,MAAM,aAA+B,CAAC;AAEtC,eAAe;IACX,IAAG,WAAW,WAAW,EAAC;QACtB,QAAQ,GAAG,CAAC;QACZ;IACJ;IAEA,IAAI;QACJ,MAAM,KAAK,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC;QAClE,WAAW,WAAW,GAAG,GAAG,WAAW,CAAC,EAAE,CAAC,UAAU;QACrD,QAAQ,GAAG,CAAC;IACZ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,4BAA2B;QACvC,QAAQ,IAAI,CAAC;IACjB;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/app/api/auth/%5B...nextauth%5D/options.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\"\r\nimport CredentialsProvider from \"next-auth/providers/credentials\"\r\nimport bcrypt from \"bcryptjs\"\r\nimport UserModel from \"@/model/user\"\r\nimport dbConnect from \"@/lib/dbcon\"\r\n\r\n\r\nexport const authOption: NextAuthOptions = {\r\n    providers: [\r\n        CredentialsProvider({\r\n            id: 'Credentials',\r\n            name: 'Credentials',\r\n            credentials: {\r\n                email: { label: \"Username\", type: \"text\" },\r\n                password: { label: \"Password\", type: \"password\" }\r\n            },\r\n\r\n            async authorize(credentials: any): Promise<any> {\r\n                await dbConnect()\r\n                try {\r\n                    const user = await UserModel.findOne({\r\n                        $or: [\r\n                            { email: credentials.identifire },\r\n                            { password: credentials.identifire }\r\n                        ]\r\n                    })\r\n\r\n                    if (!user) {\r\n                        throw new Error(\"No User found with this email\")\r\n                    }\r\n\r\n                    if (!user.isVerified) {\r\n                        throw new Error(\"Please verify your account before login\")\r\n                    }\r\n\r\n                    const isPasswordCorrect = await bcrypt.compare(credentials.password, user.password)\r\n                    if (isPasswordCorrect) {\r\n                        return user\r\n                    } else {\r\n                        throw new Error('Incorrect Password')\r\n                    }\r\n                } catch (err: any) {\r\n                    throw new Error(err)\r\n                }\r\n            }\r\n        })\r\n    ],\r\n\r\n    callbacks: {\r\n\r\n\r\n        async jwt({ token, user }) {\r\n            if (user) {\r\n                token._id = user._id?.toString()\r\n                token.isVerified = user.isVerified\r\n                token.isAcceptingMessage = user.isAcceptingMessage\r\n                token.username = user.username\r\n            }\r\n            return token\r\n        },\r\n\r\n        async session({ session, token }) {\r\n\r\n\r\n            if (token) {\r\n                session.user._id = token._id?.toString()\r\n                session.user.isVerified = token.isVerified\r\n                session.user.isAcceptingMessage = token.isAcceptingMessage\r\n                session.user.username = token.username\r\n            }\r\n\r\n            return session\r\n        },\r\n    },\r\n    pages: {\r\n        signIn: '/sign-in'\r\n    },\r\n    session: {\r\n        strategy: \"jwt\"\r\n    },\r\n    secret: process.env.NEXTAUTH_SECRET\r\n}"],"names":[],"mappings":";;;AACA;AACA;AACA;AACA;;;;;AAGO,MAAM,aAA8B;IACvC,WAAW;QACP,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAChB,IAAI;YACJ,MAAM;YACN,aAAa;gBACT,OAAO;oBAAE,OAAO;oBAAY,MAAM;gBAAO;gBACzC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YACpD;YAEA,MAAM,WAAU,WAAgB;gBAC5B,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAS,AAAD;gBACd,IAAI;oBACA,MAAM,OAAO,MAAM,sHAAA,CAAA,UAAS,CAAC,OAAO,CAAC;wBACjC,KAAK;4BACD;gCAAE,OAAO,YAAY,UAAU;4BAAC;4BAChC;gCAAE,UAAU,YAAY,UAAU;4BAAC;yBACtC;oBACL;oBAEA,IAAI,CAAC,MAAM;wBACP,MAAM,IAAI,MAAM;oBACpB;oBAEA,IAAI,CAAC,KAAK,UAAU,EAAE;wBAClB,MAAM,IAAI,MAAM;oBACpB;oBAEA,MAAM,oBAAoB,MAAM,mIAAA,CAAA,UAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;oBAClF,IAAI,mBAAmB;wBACnB,OAAO;oBACX,OAAO;wBACH,MAAM,IAAI,MAAM;oBACpB;gBACJ,EAAE,OAAO,KAAU;oBACf,MAAM,IAAI,MAAM;gBACpB;YACJ;QACJ;KACH;IAED,WAAW;QAGP,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACrB,IAAI,MAAM;gBACN,MAAM,GAAG,GAAG,KAAK,GAAG,EAAE;gBACtB,MAAM,UAAU,GAAG,KAAK,UAAU;gBAClC,MAAM,kBAAkB,GAAG,KAAK,kBAAkB;gBAClD,MAAM,QAAQ,GAAG,KAAK,QAAQ;YAClC;YACA,OAAO;QACX;QAEA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAG5B,IAAI,OAAO;gBACP,QAAQ,IAAI,CAAC,GAAG,GAAG,MAAM,GAAG,EAAE;gBAC9B,QAAQ,IAAI,CAAC,UAAU,GAAG,MAAM,UAAU;gBAC1C,QAAQ,IAAI,CAAC,kBAAkB,GAAG,MAAM,kBAAkB;gBAC1D,QAAQ,IAAI,CAAC,QAAQ,GAAG,MAAM,QAAQ;YAC1C;YAEA,OAAO;QACX;IACJ;IACA,OAAO;QACH,QAAQ;IACZ;IACA,SAAS;QACL,UAAU;IACd;IACA,QAAQ,QAAQ,GAAG,CAAC,eAAe;AACvC","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport { authOption } from \"./options\";\r\n\r\n\r\nconst handler = NextAuth(authOption)\r\n\r\nexport {handler as GET, handler as POST}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAGA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE,4JAAA,CAAA,aAAU","debugId":null}}]
}