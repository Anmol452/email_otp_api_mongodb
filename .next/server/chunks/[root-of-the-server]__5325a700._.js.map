{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/lib/dbcon.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n \r\ntype connectionObject = {\r\n    isConnected?: number\r\n}\r\n\r\nconst connection: connectionObject = {}\r\n\r\nasync function dbConnect(): Promise<void> {\r\n    if(connection.isConnected){\r\n        console.log(\"Already connected to databass\")\r\n        return\r\n    }\r\n\r\n    try {\r\n    const db = await mongoose.connect(process.env.mongoDB_URI || '', {})\r\n    // const db = await mongoose.connect(\"mongodb://localhost:27017/emailotpapp\" || '', {})\r\n    connection.isConnected = db.connections[0].readyState\r\n    console.log('db connected succefull ')\r\n    } catch (error) {\r\n        console.log(\"databass connetion falid\",error)\r\n        process.exit(1)\r\n    }\r\n}\r\n\r\nexport default dbConnect"],"names":[],"mappings":";;;AAAA;;AAOA,MAAM,aAA+B,CAAC;AAEtC,eAAe;IACX,IAAG,WAAW,WAAW,EAAC;QACtB,QAAQ,GAAG,CAAC;QACZ;IACJ;IAEA,IAAI;QACJ,MAAM,KAAK,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC;QAClE,uFAAuF;QACvF,WAAW,WAAW,GAAG,GAAG,WAAW,CAAC,EAAE,CAAC,UAAU;QACrD,QAAQ,GAAG,CAAC;IACZ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,4BAA2B;QACvC,QAAQ,IAAI,CAAC;IACjB;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/model/user.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface Message extends Document {\r\n    content: string;\r\n    createAt: Date\r\n}\r\n\r\n\r\nconst MessageSchema: Schema<Message> = new Schema({\r\n    content: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    createAt: {\r\n        type: Date,\r\n        required: true,\r\n        default: Date.now\r\n    }\r\n})\r\n\r\n\r\nexport interface User extends Document {\r\n    username: string,\r\n    email: string,\r\n    password: string,\r\n    verifyCode: string,\r\n    verifyCodeExpiry: Date,\r\n    isVerified: boolean,\r\n    isAcceptingMessage: boolean,\r\n    message: Message[]\r\n}\r\n\r\n\r\nconst UserSchema: Schema<User> = new Schema({\r\n    username: {\r\n        type: String,\r\n        required: [true, \"Username is required\"],\r\n        trim: true,\r\n        unique: true\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n        required: [true, \"email is required\"],\r\n        unique: true,\r\n        match: [/.+\\@.+\\..+/, \"plase use a valid email address\"]\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n        required: [true, \"password is required\"],\r\n    },\r\n\r\n    verifyCode: {\r\n        type: String,\r\n        required: [true, \"verify code is required\"],\r\n    },\r\n    verifyCodeExpiry: { \r\n        type: Date\r\n    },\r\n\r\n    isVerified: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n\r\n    isAcceptingMessage: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n\r\n    message: [MessageSchema]\r\n})\r\n\r\n\r\nconst UserModel = (mongoose.models.User as mongoose.Model<User>) || mongoose.model(\"User\", UserSchema)\r\n\r\nexport default UserModel;"],"names":[],"mappings":";;;AAAA;;AAQA,MAAM,gBAAiC,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC9C,SAAS;QACL,MAAM;QACN,UAAU;IACd;IACA,UAAU;QACN,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACrB;AACJ;AAeA,MAAM,aAA2B,IAAI,yGAAA,CAAA,SAAM,CAAC;IACxC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;QACN,QAAQ;IACZ;IAEA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,OAAO;YAAC;YAAc;SAAkC;IAC5D;IAEA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;IAC5C;IAEA,YAAY;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;IAC/C;IACA,kBAAkB;QACd,MAAM;IACV;IAEA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IAEA,oBAAoB;QAChB,MAAM;QACN,SAAS;IACb;IAEA,SAAS;QAAC;KAAc;AAC5B;AAGA,MAAM,YAAY,AAAC,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAA6B,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE5E","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/app/api/verify-code/route.ts"],"sourcesContent":["import dbConnect from \"@/lib/dbcon\";\r\nimport UserModel from \"@/model/user\";\r\nimport { request } from \"http\";\r\n\r\n\r\nexport async function POST() {\r\n    await dbConnect()\r\n\r\n    try {\r\n        const { username, code } = await request.json()\r\n\r\n        const decodedUsername = decodeURIComponent(username)\r\n        const user = await UserModel.findOne({ username: decodedUsername })\r\n        if (!user) {\r\n            return Response.json(\r\n                {\r\n                    success: false,\r\n                    message: \"User not found\"\r\n                }, { status: 500 }\r\n            )\r\n        }\r\n\r\n        const isCodeVarified = user.verifyCode === code\r\n        const isCodeNotExpiry = new Date(user.verifyCodeExpiry) > new Date()\r\n\r\n        if (isCodeVarified && isCodeNotExpiry) {\r\n            user.isVerified = true\r\n            await user.save()\r\n\r\n            return Response.json(\r\n                {\r\n                    success: true,\r\n                    message: \"Account Verified Successfully\"\r\n                }, { status: 200 }\r\n            )\r\n        } else if(!isCodeNotExpiry){\r\n             return Response.json(\r\n                {\r\n                    success: false,\r\n                    message: \"Verification Code Has Expired, Please Singup Again To Get a New Code\"\r\n                }, { status: 400 }\r\n            )\r\n        }else{\r\n             return Response.json(\r\n                {\r\n                    success: false,\r\n                    message: \"Incorrect Vrification Code\"\r\n                }, { status: 400 }\r\n            )\r\n        }\r\n\r\n\r\n\r\n    } catch (error) {\r\n        console.log(\"Error veriflying user\", error)\r\n        return Response.json(\r\n            {\r\n                success: false,\r\n                message: \"Error veriflying user\"\r\n            }, { status: 500 }\r\n        )\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAGO,eAAe;IAClB,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAS,AAAD;IAEd,IAAI;QACA,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG,MAAM,iGAAA,CAAA,UAAO,CAAC,IAAI;QAE7C,MAAM,kBAAkB,mBAAmB;QAC3C,MAAM,OAAO,MAAM,sHAAA,CAAA,UAAS,CAAC,OAAO,CAAC;YAAE,UAAU;QAAgB;QACjE,IAAI,CAAC,MAAM;YACP,OAAO,SAAS,IAAI,CAChB;gBACI,SAAS;gBACT,SAAS;YACb,GAAG;gBAAE,QAAQ;YAAI;QAEzB;QAEA,MAAM,iBAAiB,KAAK,UAAU,KAAK;QAC3C,MAAM,kBAAkB,IAAI,KAAK,KAAK,gBAAgB,IAAI,IAAI;QAE9D,IAAI,kBAAkB,iBAAiB;YACnC,KAAK,UAAU,GAAG;YAClB,MAAM,KAAK,IAAI;YAEf,OAAO,SAAS,IAAI,CAChB;gBACI,SAAS;gBACT,SAAS;YACb,GAAG;gBAAE,QAAQ;YAAI;QAEzB,OAAO,IAAG,CAAC,iBAAgB;YACtB,OAAO,SAAS,IAAI,CACjB;gBACI,SAAS;gBACT,SAAS;YACb,GAAG;gBAAE,QAAQ;YAAI;QAEzB,OAAK;YACA,OAAO,SAAS,IAAI,CACjB;gBACI,SAAS;gBACT,SAAS;YACb,GAAG;gBAAE,QAAQ;YAAI;QAEzB;IAIJ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,yBAAyB;QACrC,OAAO,SAAS,IAAI,CAChB;YACI,SAAS;YACT,SAAS;QACb,GAAG;YAAE,QAAQ;QAAI;IAEzB;AACJ","debugId":null}}]
}