{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/lib/dbcon.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n \r\ntype connectionObject = {\r\n    isConnected?: number\r\n}\r\n\r\nconst connection: connectionObject = {}\r\n\r\nasync function dbConnect(): Promise<void> {\r\n    if(connection.isConnected){\r\n        console.log(\"Already connected to databass\")\r\n        return\r\n    }\r\n\r\n    try {\r\n    const db = await mongoose.connect(process.env.mongoDB_URI || '', {})\r\n    // const db = await mongoose.connect(\"mongodb://localhost:27017/emailotpapp\" || '', {})\r\n    connection.isConnected = db.connections[0].readyState\r\n    console.log('db connected succefull ')\r\n    } catch (error) {\r\n        console.log(\"databass connetion falid\",error)\r\n        process.exit(1)\r\n    }\r\n}\r\n\r\nexport default dbConnect"],"names":[],"mappings":";;;AAAA;;AAOA,MAAM,aAA+B,CAAC;AAEtC,eAAe;IACX,IAAG,WAAW,WAAW,EAAC;QACtB,QAAQ,GAAG,CAAC;QACZ;IACJ;IAEA,IAAI;QACJ,MAAM,KAAK,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC;QAClE,uFAAuF;QACvF,WAAW,WAAW,GAAG,GAAG,WAAW,CAAC,EAAE,CAAC,UAAU;QACrD,QAAQ,GAAG,CAAC;IACZ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,4BAA2B;QACvC,QAAQ,IAAI,CAAC;IACjB;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/model/user.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface Message extends Document {\r\n    content: string;\r\n    createAt: Date\r\n}\r\n\r\n\r\nconst MessageSchema: Schema<Message> = new Schema({\r\n    content: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    createAt: {\r\n        type: Date,\r\n        required: true,\r\n        default: Date.now\r\n    }\r\n})\r\n\r\n\r\nexport interface User extends Document {\r\n    username: string,\r\n    email: string,\r\n    password: string,\r\n    verifyCode: string,\r\n    verifyCodeExpiry: Date,\r\n    isVerified: boolean,\r\n    isAcceptingMessage: boolean,\r\n    message: Message[]\r\n}\r\n\r\n\r\nconst UserSchema: Schema<User> = new Schema({\r\n    username: {\r\n        type: String,\r\n        required: [true, \"Username is required\"],\r\n        trim: true,\r\n        unique: true\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n        required: [true, \"email is required\"],\r\n        unique: true,\r\n        match: [/.+\\@.+\\..+/, \"plase use a valid email address\"]\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n        required: [true, \"password is required\"],\r\n    },\r\n\r\n    verifyCode: {\r\n        type: String,\r\n        required: [true, \"verify code is required\"],\r\n    },\r\n    verifyCodeExpiry: { \r\n        type: Date\r\n    },\r\n\r\n    isVerified: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n\r\n    isAcceptingMessage: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n\r\n    message: [MessageSchema]\r\n})\r\n\r\n\r\nconst UserModel = (mongoose.models.User as mongoose.Model<User>) || mongoose.model(\"User\", UserSchema)\r\n\r\nexport default UserModel;"],"names":[],"mappings":";;;AAAA;;AAQA,MAAM,gBAAiC,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC9C,SAAS;QACL,MAAM;QACN,UAAU;IACd;IACA,UAAU;QACN,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACrB;AACJ;AAeA,MAAM,aAA2B,IAAI,yGAAA,CAAA,SAAM,CAAC;IACxC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;QACN,QAAQ;IACZ;IAEA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,OAAO;YAAC;YAAc;SAAkC;IAC5D;IAEA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;IAC5C;IAEA,YAAY;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;IAC/C;IACA,kBAAkB;QACd,MAAM;IACV;IAEA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IAEA,oBAAoB;QAChB,MAAM;QACN,SAAS;IACb;IAEA,SAAS;QAAC;KAAc;AAC5B;AAGA,MAAM,YAAY,AAAC,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAA6B,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE5E","debugId":null}},
    {"offset": {"line": 171, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/app/api/sign-up/route.ts"],"sourcesContent":["import dbConnect from \"@/lib/dbcon\";\r\nimport UserModel from \"@/model/user\";\r\nimport bcrypt from \"bcryptjs\"\r\n// import { sendVarificationEmail } from \"@/helpers/sendVerificationEmail\";\r\n\r\n\r\nexport async function POST(request: Request) {\r\n    await dbConnect()\r\n\r\n\r\n    try {\r\n        const { username, email, password } = await request.json()\r\n\r\n        const existingUserVerifiedByusername = await UserModel.findOne({\r\n            username,\r\n            isVerified: true\r\n        })\r\n\r\n        if (existingUserVerifiedByusername) {\r\n            return Response.json(\r\n                {\r\n                    success: false,\r\n                    message: \"Username is Already Token\"\r\n                },\r\n                { status: 400 })\r\n        }\r\n\r\n\r\n        const existingUserByemail = await UserModel.findOne({ email })\r\n\r\n        const verifyCode = Math.floor(100000 + Math.random() * 900000).toString()\r\n\r\n\r\n        if (existingUserByemail) {\r\n            if (existingUserByemail.isVerified) {\r\n                return Response.json(\r\n                    {\r\n                        success: false,\r\n                        message: \"User already exit with this email\"\r\n                    },\r\n                    { status: 400 })\r\n            } else{\r\n                const hasedPassword = await bcrypt.hash(password, 10)\r\n                existingUserByemail.password = hasedPassword\r\n                existingUserByemail.verifyCode = verifyCode\r\n                existingUserByemail.verifyCodeExpiry = new Date(Date.now() + 3600000)   \r\n                await existingUserByemail.save()\r\n            }\r\n        } else {\r\n            const hasedPassword = await bcrypt.hash(password, 10)\r\n            const expiryDate = new Date()\r\n            expiryDate.setHours(expiryDate.getHours() + 1)\r\n\r\n            const newUser = new UserModel({\r\n                username,\r\n                email,\r\n                password: hasedPassword,\r\n                verifyCode,\r\n                vrifycodeExpiry: expiryDate,\r\n                isVerified: false,\r\n                isAcceptingMessage: true,\r\n                message: []\r\n            })\r\n\r\n            await newUser.save()\r\n\r\n        }\r\n\r\n        //send  verification email\r\n        const eamilResponse = await sendVarificationEmail(\r\n            email,\r\n            username,\r\n            verifyCode\r\n          \r\n        )\r\n\r\n        if (!eamilResponse.success) {\r\n            return Response.json({\r\n                success: false,\r\n                message: eamilResponse.message\r\n            }, { status: 500 })\r\n        }\r\n\r\n        return Response.json({\r\n            success: true,\r\n            message: \"User Registered successfully.Please varify your email \"\r\n        }, { status: 201 })\r\n\r\n\r\n\r\n    } catch (error) {\r\n        console.error(\"Error registering user \", error)\r\n        return Response.json(\r\n            {\r\n                success: false,\r\n                message: \"Error registering user\"\r\n            },\r\n            { status: 500 })\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAIO,eAAe,KAAK,OAAgB;IACvC,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAS,AAAD;IAGd,IAAI;QACA,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,MAAM,QAAQ,IAAI;QAExD,MAAM,iCAAiC,MAAM,sHAAA,CAAA,UAAS,CAAC,OAAO,CAAC;YAC3D;YACA,YAAY;QAChB;QAEA,IAAI,gCAAgC;YAChC,OAAO,SAAS,IAAI,CAChB;gBACI,SAAS;gBACT,SAAS;YACb,GACA;gBAAE,QAAQ;YAAI;QACtB;QAGA,MAAM,sBAAsB,MAAM,sHAAA,CAAA,UAAS,CAAC,OAAO,CAAC;YAAE;QAAM;QAE5D,MAAM,aAAa,KAAK,KAAK,CAAC,SAAS,KAAK,MAAM,KAAK,QAAQ,QAAQ;QAGvE,IAAI,qBAAqB;YACrB,IAAI,oBAAoB,UAAU,EAAE;gBAChC,OAAO,SAAS,IAAI,CAChB;oBACI,SAAS;oBACT,SAAS;gBACb,GACA;oBAAE,QAAQ;gBAAI;YACtB,OAAM;gBACF,MAAM,gBAAgB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;gBAClD,oBAAoB,QAAQ,GAAG;gBAC/B,oBAAoB,UAAU,GAAG;gBACjC,oBAAoB,gBAAgB,GAAG,IAAI,KAAK,KAAK,GAAG,KAAK;gBAC7D,MAAM,oBAAoB,IAAI;YAClC;QACJ,OAAO;YACH,MAAM,gBAAgB,MAAM,mIAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;YAClD,MAAM,aAAa,IAAI;YACvB,WAAW,QAAQ,CAAC,WAAW,QAAQ,KAAK;YAE5C,MAAM,UAAU,IAAI,sHAAA,CAAA,UAAS,CAAC;gBAC1B;gBACA;gBACA,UAAU;gBACV;gBACA,iBAAiB;gBACjB,YAAY;gBACZ,oBAAoB;gBACpB,SAAS,EAAE;YACf;YAEA,MAAM,QAAQ,IAAI;QAEtB;QAEA,0BAA0B;QAC1B,MAAM,gBAAgB,MAAM,sBACxB,OACA,UACA;QAIJ,IAAI,CAAC,cAAc,OAAO,EAAE;YACxB,OAAO,SAAS,IAAI,CAAC;gBACjB,SAAS;gBACT,SAAS,cAAc,OAAO;YAClC,GAAG;gBAAE,QAAQ;YAAI;QACrB;QAEA,OAAO,SAAS,IAAI,CAAC;YACjB,SAAS;YACT,SAAS;QACb,GAAG;YAAE,QAAQ;QAAI;IAIrB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,2BAA2B;QACzC,OAAO,SAAS,IAAI,CAChB;YACI,SAAS;YACT,SAAS;QACb,GACA;YAAE,QAAQ;QAAI;IACtB;AACJ","debugId":null}}]
}