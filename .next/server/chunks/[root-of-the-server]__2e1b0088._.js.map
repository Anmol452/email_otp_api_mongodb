{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/lib/dbcon.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\n \r\ntype connectionObject = {\r\n    isConnected?: number\r\n}\r\n\r\nconst connection: connectionObject = {}\r\n\r\nasync function dbConnect(): Promise<void> {\r\n    if(connection.isConnected){\r\n        console.log(\"Already connected to databass\")\r\n        return\r\n    }\r\n\r\n    try {\r\n    const db = await mongoose.connect(process.env.mongoDB_URI || '', {})\r\n    // const db = await mongoose.connect(\"mongodb://localhost:27017/emailotpapp\" || '', {})\r\n    connection.isConnected = db.connections[0].readyState\r\n    console.log('db connected succefull ')\r\n    } catch (error) {\r\n        console.log(\"databass connetion falid\",error)\r\n        process.exit(1)\r\n    }\r\n}\r\n\r\nexport default dbConnect"],"names":[],"mappings":";;;AAAA;;AAOA,MAAM,aAA+B,CAAC;AAEtC,eAAe;IACX,IAAG,WAAW,WAAW,EAAC;QACtB,QAAQ,GAAG,CAAC;QACZ;IACJ;IAEA,IAAI;QACJ,MAAM,KAAK,MAAM,yGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,QAAQ,GAAG,CAAC,WAAW,IAAI,IAAI,CAAC;QAClE,uFAAuF;QACvF,WAAW,WAAW,GAAG,GAAG,WAAW,CAAC,EAAE,CAAC,UAAU;QACrD,QAAQ,GAAG,CAAC;IACZ,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,4BAA2B;QACvC,QAAQ,IAAI,CAAC;IACjB;AACJ;uCAEe","debugId":null}},
    {"offset": {"line": 88, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/model/user.ts"],"sourcesContent":["import mongoose, { Schema, Document } from 'mongoose';\r\n\r\nexport interface Message extends Document {\r\n    content: string;\r\n    createAt: Date\r\n}\r\n\r\n\r\nconst MessageSchema: Schema<Message> = new Schema({\r\n    content: {\r\n        type: String,\r\n        required: true\r\n    },\r\n    createAt: {\r\n        type: Date,\r\n        required: true,\r\n        default: Date.now\r\n    }\r\n})\r\n\r\n\r\nexport interface User extends Document {\r\n    username: string,\r\n    email: string,\r\n    password: string,\r\n    verifyCode: string,\r\n    verifyCodeExpiry: Date,\r\n    isVerified: boolean,\r\n    isAcceptingMessage: boolean,\r\n    message: Message[]\r\n}\r\n\r\n\r\nconst UserSchema: Schema<User> = new Schema({\r\n    username: {\r\n        type: String,\r\n        required: [true, \"Username is required\"],\r\n        trim: true,\r\n        unique: true\r\n    },\r\n\r\n    email: {\r\n        type: String,\r\n        required: [true, \"email is required\"],\r\n        unique: true,\r\n        match: [/.+\\@.+\\..+/, \"plase use a valid email address\"]\r\n    },\r\n\r\n    password: {\r\n        type: String,\r\n        required: [true, \"password is required\"],\r\n    },\r\n\r\n    verifyCode: {\r\n        type: String,\r\n        required: [true, \"verify code is required\"],\r\n    },\r\n    verifyCodeExpiry: { \r\n        type: Date\r\n    },\r\n\r\n    isVerified: {\r\n        type: Boolean,\r\n        default: false,\r\n    },\r\n\r\n    isAcceptingMessage: {\r\n        type: Boolean,\r\n        default: true\r\n    },\r\n\r\n    message: [MessageSchema]\r\n})\r\n\r\n\r\nconst UserModel = (mongoose.models.User as mongoose.Model<User>) || mongoose.model(\"User\", UserSchema)\r\n\r\nexport default UserModel;"],"names":[],"mappings":";;;AAAA;;AAQA,MAAM,gBAAiC,IAAI,yGAAA,CAAA,SAAM,CAAC;IAC9C,SAAS;QACL,MAAM;QACN,UAAU;IACd;IACA,UAAU;QACN,MAAM;QACN,UAAU;QACV,SAAS,KAAK,GAAG;IACrB;AACJ;AAeA,MAAM,aAA2B,IAAI,yGAAA,CAAA,SAAM,CAAC;IACxC,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;QACN,QAAQ;IACZ;IAEA,OAAO;QACH,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,QAAQ;QACR,OAAO;YAAC;YAAc;SAAkC;IAC5D;IAEA,UAAU;QACN,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;IAC5C;IAEA,YAAY;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA0B;IAC/C;IACA,kBAAkB;QACd,MAAM;IACV;IAEA,YAAY;QACR,MAAM;QACN,SAAS;IACb;IAEA,oBAAoB;QAChB,MAAM;QACN,SAAS;IACb;IAEA,SAAS;QAAC;KAAc;AAC5B;AAGA,MAAM,YAAY,AAAC,yGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAA6B,yGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAE5E","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/schemas/signUpSchemas.ts"],"sourcesContent":["import {z} from \"zod\";\r\n\r\nexport const usernameValidation = z\r\n    .string()\r\n    .min(2,\"Username must be atleast 2 characters\")\r\n    .max(20, \"Usernane must be no more than 20 characters\")\r\n    .regex(/^[a-zA-Z0-9_]+$/,\"Username must not contain special Characters\")\r\n\r\n\r\n    export const signUpschems = z.object({\r\n      username: usernameValidation,\r\n      email: z.string().email({message: \"Invalid email address\"}),\r\n      password: z.string().min(6 ,{message: \"your password must be 6 characters\"})\r\n    })"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEO,MAAM,qBAAqB,mLAAA,CAAA,IAAC,CAC9B,MAAM,GACN,GAAG,CAAC,GAAE,yCACN,GAAG,CAAC,IAAI,+CACR,KAAK,CAAC,mBAAkB;AAGlB,MAAM,eAAe,mLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,UAAU;IACV,OAAO,mLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;QAAC,SAAS;IAAuB;IACzD,UAAU,mLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC,GAAG;QAAC,SAAS;IAAoC;AAC5E","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/myprojects/nextjs_project/chai_or_code/project_mongodb/mistrymess/src/app/api/check-username-unique/route.ts"],"sourcesContent":["import dbConnect from \"@/lib/dbcon\";\r\nimport UserModel from \"@/model/user\";\r\nimport { z } from \"zod\";\r\nimport { usernameValidation } from \"@/schemas/signUpSchemas\";\r\n\r\n\r\nconst UsernameQueryScheme = z.object({\r\n    username: usernameValidation\r\n})\r\n\r\nexport async function GET(request : Request) {\r\n\r\n    await dbConnect()\r\n\r\n    try {\r\n       const {searchParams} = new URL(request.url)\r\n       const queryParam ={\r\n         username: searchParams.get('username')\r\n       }\r\n\r\n       // validate with zod\r\n       const result = UsernameQueryScheme.safeParse(queryParam)\r\n\r\n       if(!result.success){\r\n        const usernameErrors = result.error.format().username?._errors || []\r\n        return Response.json(\r\n            {\r\n                success:false,\r\n                message:usernameErrors?.length > 0 ? usernameErrors.push(','):'Invalid query param'\r\n            },{status:400}\r\n        )}\r\n\r\n        const {username} = result.data\r\n        const existingVerifieduser = await UserModel.findOne({username, isVerified:true})\r\n\r\n        if(existingVerifieduser){\r\n          return Response.json(\r\n            {\r\n                success:false,\r\n                message:'Username is Already Token'\r\n            },{status:400}\r\n        )}\r\n\r\n         return Response.json(\r\n            {\r\n                success:true,\r\n                message:'Username is Available'\r\n            },{status:200}\r\n        )  \r\n        \r\n    } catch (error) {\r\n       console.log(\"Error chaecking Username\" , error)\r\n       return Response.json(\r\n        {\r\n            success: false,\r\n            message: \"Error chaecking Username\"\r\n        },{status:500}\r\n       )}\r\n    \r\n}"],"names":[],"mappings":";;;AAAA;AACA;AACA;AAAA;AACA;;;;;AAGA,MAAM,sBAAsB,mLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACjC,UAAU,iIAAA,CAAA,qBAAkB;AAChC;AAEO,eAAe,IAAI,OAAiB;IAEvC,MAAM,CAAA,GAAA,qHAAA,CAAA,UAAS,AAAD;IAEd,IAAI;QACD,MAAM,EAAC,YAAY,EAAC,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC1C,MAAM,aAAY;YAChB,UAAU,aAAa,GAAG,CAAC;QAC7B;QAEA,oBAAoB;QACpB,MAAM,SAAS,oBAAoB,SAAS,CAAC;QAE7C,IAAG,CAAC,OAAO,OAAO,EAAC;YAClB,MAAM,iBAAiB,OAAO,KAAK,CAAC,MAAM,GAAG,QAAQ,EAAE,WAAW,EAAE;YACpE,OAAO,SAAS,IAAI,CAChB;gBACI,SAAQ;gBACR,SAAQ,gBAAgB,SAAS,IAAI,eAAe,IAAI,CAAC,OAAK;YAClE,GAAE;gBAAC,QAAO;YAAG;QAChB;QAED,MAAM,EAAC,QAAQ,EAAC,GAAG,OAAO,IAAI;QAC9B,MAAM,uBAAuB,MAAM,sHAAA,CAAA,UAAS,CAAC,OAAO,CAAC;YAAC;YAAU,YAAW;QAAI;QAE/E,IAAG,sBAAqB;YACtB,OAAO,SAAS,IAAI,CAClB;gBACI,SAAQ;gBACR,SAAQ;YACZ,GAAE;gBAAC,QAAO;YAAG;QAChB;QAEA,OAAO,SAAS,IAAI,CACjB;YACI,SAAQ;YACR,SAAQ;QACZ,GAAE;YAAC,QAAO;QAAG;IAGrB,EAAE,OAAO,OAAO;QACb,QAAQ,GAAG,CAAC,4BAA6B;QACzC,OAAO,SAAS,IAAI,CACnB;YACI,SAAS;YACT,SAAS;QACb,GAAE;YAAC,QAAO;QAAG;IACb;AAER","debugId":null}}]
}